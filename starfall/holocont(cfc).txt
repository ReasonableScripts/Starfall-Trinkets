--@name HoloCont(cfc)
--@author PurpleDismay
--@server
hook.add("hudconnected","The Actual Code",function()





//Do you allow this starfall to use your console to run a chat death message? On by Default
DoAllow = true
//Do you allow this starfall to use your console to run a chat death message? On by Default








Arr = {}
Forward = 0
Backward = 0
Left = 0
Right = 0
sprint = 1
ForwardLeft = 0
ForwardRight = 0
BackwardLeft = 0
BackwardRight = 0
Target = chip()
vel = 0
ScrollDist = 0
vel2 = 0
PropDistance = 0
PropPickup = chip()
DeathByPlayer = nil
veltest = 0
MaxPhysDist = 8000
TEST = 0
physgunlift = 0
PhysgunEnd = chip():getPos()
jump = 0
tog = 1
p = Vector(0,0)

Filter = {}
speed = 200
use = 0
crouch = 0



Arr[0] = holograms.create(chip():getPos(), Angle(0,180,0), tostring(owner():getModel()), Vector(1,1,1))

AvatarPos = Arr[0]:getPos()
AvatarPos.z = AvatarPos.z + 35



Arr[1] = holograms.create(chip():getPos(), Angle(0,0,0), "models/hunter/blocks/cube025x025x025.mdl", Vector(0,0,0))
Arr[2] = holograms.create(chip():getPos(), Angle(0,0,0), "models/weapons/w_physics.mdl", Vector(1,1,1))




Arr[3] = holograms.create(chip():getPos(), Angle(0,0,0), "models/hunter/blocks/cube025x025x025.mdl", Vector(1,1,1))
Arr[3]:setColor(Color(0,0,0,0))

Arr[2]:setPos(Vector(Arr[0]:getPos().x,Arr[0]:getPos().y-1,Arr[0]:getPos().z))

Arr[2]:setParent(Arr[0],nil,12)
Arr[2]:setSkin(1)

lol = prop.create(AvatarPos, Angle(0,0,90), "models/hunter/blocks/cube05x105x05.mdl", true)

lol:setNoDraw(true)
//qlol:setNocollideAll(true)

Rag = prop.createRagdoll(tostring(owner():getModel()), false)
Rag:setNoDraw(true)
Rag:setNocollideAll(true)
for i=0,55 do
Rag:getPhysicsObjectNum(Rag:translateBoneToPhysBone(i)):setPos(chip():getPos())    
end


Turret = prop.createSent(chip():getPos(),Angle(0,0,0),"gmod_wire_turret",true)
wire.adjustOutputs({"Damage","Spread","Delay","Fire"},{"Number","Number","Number","number"})
    wire.ports.Damage = 4
    wire.ports.Spread = 0.05
    wire.ports.Delay  = 0.05
    wire.ports.Fire   = 0

 wire.create(Turret,chip(),(wire.getInputs(Turret))[3],"Damage")
    wire.create(Turret,chip(),(wire.getInputs(Turret))[4],"Spread")
    wire.create(Turret,chip(),(wire.getInputs(Turret))[5],"Delay")
    wire.create(Turret,chip(),(wire.getInputs(Turret))[7],"Fire")



Turret:setNocollideAll(true)
Turret:setAngles(Angle(0,0,0))
Turret:setNoDraw(true)
Turret:setParent(Arr[1])
Turret:setPos(Turret:getForward()*110)



Arr[4] = holograms.create(chip():getPos(), Angle(0,0,0), "models/weapons/w_smg1.mdl", Vector(1,1,1))
Arr[4]:setAngles(Angle(-90,0,90))
Arr[4]:setParent(Arr[0],nil,12)



local pos = Arr[4]:getPos()
pos.y = pos.y + 6.5
pos.x = pos.x - 3.75
pos.z = pos.z - 3
print(pos)
Arr[4]:setPos(pos)
all = "all"



print("Made by PurpleDismay")
print("Movement: Crouching, Sprinting")
print("Weapons: Physgun and Hands")
print("Commands: /goto playername ")
print("Spawning Props is mostly functional")
print("")
print("(Jumping also exists but I dont plan to fix it)")
print("THIS STARFALL CAN MAKE USE OF YOUR CONSOLE TO CREATE A DEATH MESSAGE")
print("YOU CAN ENABLE THIS BY DOING /dmsg true OR DISABLE IT BY DOING /dmsg false")
hook.add( "calcview", "blah", function( pos, ang, fov, znear, zfar )

 return {
        origin = Vector(0,0,0),
 
        drawviewer = true,
    
    }
end )


hook.add( "EntityTakeDamage", "blah", function( target, attacker, inflictor, amount, type, position, force )

if target:getOwner() == owner() then

DeathByPlayer = attacker
end



return {
    true
    
}





end )





hook.add( "OnEntityCreated", "blah", function(Entity)
if  isValid(Entity) == true then
    if Entity:getOwner() == owner() and prop.canSpawn() == true then

      local Filter = {Arr[0], Arr[1], lol, Arr[2], Arr[3]}
    local PropSpawnPos = trace.trace(Arr[1]:getPos(),(Arr[1]:getPos()) - (-Arr[1]:getForward() * (10000)),Filter).HitPos 
    
    Entity:setPos(PropSpawnPos)
    Entity:setAngles(Angle(0,owner():getEyeAngles().yaw,0))
end
end

end )










hook.add( "KeyPress", "name", function( ply, key )
  // if ply == owner() then
 //  print(key)
//end

if key == 1048576 and ply == owner() then
        ScrollUp = 1
end

if key == 2097152 and ply == owner() then
        ScrollDown = 1
        
end


if key == 1 and ply == owner() then
        primary = 1
end


if key == 4 and ply == owner() then
        crouch = 1
end

if key == 32 and ply == owner() then
  //      use = 1
end

if key == 2 and ply == owner() then
        jump = 1
end

if key == 131072 and ply == owner() then
   sprint = 2
end

if key == 512 and ply == owner() then
        Left = 99
end
if key == 1024 and ply == owner() then
        Right = 99
end
if key == 8 and ply == owner() then
        Forward = 99
end
if key == 16 and ply == owner() then
        Backward = 99
end

if key == 8 and key == 512 and ply == owner() then
    ForwardLeft = 99
end
if key == 8 and key == 1024 and ply == owner() then
    ForwardRight = 99
end
if key == 16 and key == 512 and ply == owner() then
       BackwardLeft = 99
end  
if key == 16  and key == 1024 and ply == owner() then
       BackwardRight = 99
end 

 
end )
hook.add("KeyRelease", "nam", function( ply, key )

if key == 1048576 and ply == owner() then
        ScrollUp = 0
end

if key == 2097152 and ply == owner() then
        ScrollDown = 0
        
end

if key == 1 and ply == owner() then
        primary = 0
end



if key == 131072 and ply == owner() then
   sprint = 1
end

if key == 8 and ply == owner() then
    Forward = 0
end
if key == 16 and ply == owner() then
       Backward = 0
end  
if key == 512 and ply == owner() then      
        Left = 0
end
if key == 1024 and ply == owner() then     
        Right = 0
end

if key == 8 and key == 512 and ply == owner() then
    ForwardLeft = 0
end
if key == 8 and key == 1024 and ply == owner() then
    ForwardRight = 0
end
if key == 16 and key == 512 and ply == owner() then
       BackwardLeft = 0
end  
if key == 16  and key == 1024 and ply == owner() then
       BackwardRight = 0
end 

if key == 4 and ply == owner() then 
        crouch = 0
end

    
    
end )

hook.add("Playersay","said",function(player,text)
    if player == owner() then
        if text:sub(1,6) == "/goto " then
            local preTarget = find.playersByName( text:sub(7), false ,false )[1]
            
            if preTarget:isPlayer() == true then
                Target = preTarget
                pos = Target:getPos()
                pos.z = pos.z + (32.5*3.25)
                Arr[0]:setPos(pos)
                Arr[1]:setPos(pos)
                lol:setPos(pos)
                print( "Teleported to: " .. Target:getName() )
            else
                print( "Could not teleport to player" )
            end
            
            return true
        end
        if text:sub(1,6) == "/Goto " then
            local preTarget = find.playersByName( text:sub(7), false ,false )[1]
            
            if preTarget:isPlayer() == true then
                Target = preTarget
                pos = Target:getPos()
                pos.z = pos.z + (32.5*3.25)
                Arr[0]:setPos(pos)
                Arr[1]:setPos(pos)
                lol:setPos(pos)
                print( "Teleported to: " .. Target:getName() )
            else
                print( "Could not teleport to player" )
            end
            
            return true
        end
       
    end
    end)
    
    
    
  

timer.create("The Timer", 0.05, 0, function()
    owner():setViewEntity(Arr[1])
    
    if isValid(lol) == true then
       Lolpos = lol:getPos() 
      lol:setNoDraw(true)
    end
    
    
    
    
    
    if isValid(Turret) == false then
       Turret = prop.createSent(chip():getPos(),Angle(0,0,0),"gmod_wire_turret",true)
wire.adjustOutputs({"Damage","Spread","Delay","Fire"},{"Number","Number","Number","number"})
    wire.ports.Damage = 4
    wire.ports.Spread = 0.05
    wire.ports.Delay  = 0.05
    wire.ports.Fire   = 0

 wire.create(Turret,chip(),(wire.getInputs(Turret))[3],"Damage")
    wire.create(Turret,chip(),(wire.getInputs(Turret))[4],"Spread")
    wire.create(Turret,chip(),(wire.getInputs(Turret))[5],"Delay")
    wire.create(Turret,chip(),(wire.getInputs(Turret))[7],"Fire")



Turret:setNocollideAll(true)
Turret:setAngles(Angle(0,0,0))
Turret:setNoDraw(true)
Turret:setParent(Arr[1])
Turret:setPos(Turret:getForward()*110) 
    end
    
    
    
    
    if isValid(lol) == false then
        
    if DoAllow == true then
    concmd("say "..owner():getName().."'s Bot Was Killed by "..tostring(DeathByPlayer:getName()))
    end
    
    for i=0,55 do
    local pos, ang = Arr[0]:getBonePosition(i)
    Rag:getPhysicsObjectNum(Rag:translateBoneToPhysBone(i)):setPos(pos)  
    Rag:getPhysicsObjectNum(Rag:translateBoneToPhysBone(i)):setAngles(ang)
    end
    Rag:setNoDraw(false)
    
    lol = prop.create(Lolpos, Angle(0,0,0), "models/hunter/blocks/cube05x105x05.mdl", true)
    lol:setPos(chip():getPos())
    Lolpos = chip():getPos()
    Arr[0]:setPos(chip():getPos())
    end
    
    
    
    
    
    Weapon = ((owner():getActiveWeapon()):getClass())
    
   //print(Weapon)    
    if Weapon == "weapon_physgun" and Weapon ~= "none" and Weapon ~= "weapon_amg1" then
    all = "physgun"
    all2 = "physgun"
    Arr[2]:setColor(Color(255,255,255,255))
    Arr[4]:setColor(Color(0,0,0,0))
    end
    
    if Weapon == "weapon_smg1" and Weapon ~= "none" and Weapon ~= "weapon_physgun" then
    all = "smg1"
    all2 = "smg1"
    Arr[2]:setColor(Color(0,0,0,0))
    Arr[4]:setColor(Color(255,255,255,255))
    end
    
    if Weapon ~= "weapon_physgun" and Weapon ~= "weapon_smg1" then
    all = "all"
    all2 = "all_01"
    Arr[2]:setColor(Color(0,0,0,0))
    Arr[4]:setColor(Color(0,0,0,0))
    
    end
    
    
    
    
    ang = -(owner():getEyeAngles().yaw+180)/57.5
    Arr[1]:setAngles(owner():getEyeAngles())
    
    
    
    
    
    if crouch == 1 and Forward<1 and Backward<1 and Left<1 and Right<1 then
        Arr[0]:setAnimation("cidle_"..all,nil,1)
        speed = 0
        physgunlift = 0
    else
        if crouch == 1 then   
            speed = 60
            physgunlift = 11
            Arr[0]:setAnimation("cwalk_"..all,nil,1) 
            
            if Forward>0 and Backward<1 and Left<1 and Right<1 then
            Arr[0]:setPose("move_y",0)
            Arr[0]:setPose("move_x",1)  
            end
            if Backward>0 and Forward<1 and Left<1 and Right<1 then
            Arr[0]:setPose("move_y",0)
            Arr[0]:setPose("move_x",-1)
            ang = ang+ 3.14159
            end
            if Left>0 and Right<1 and Forward<1 and Backward<1 then
            Arr[0]:setPose("move_y",-1)
            ang = ang -(3.14159*0.5)  
            end
            if Right>0 and Left<1 and Forward<1 and Backward<1 then
            Arr[0]:setPose("move_y",1)
             ang = ang +(3.14159*0.5)
            end
            
            
            
            if Forward>0 and Left>0 and Backward<1 and Right<1 then
            Arr[0]:setPose("move_y",-1)
            Arr[0]:setPose("move_x",1)  
            ang = ang -(3.14159*0.25) 
            end
            if Forward>0 and Right>1 and Left<1 and Backward<1 then
            Arr[0]:setPose("move_y",1)
            Arr[0]:setPose("move_x",1)
            ang = ang +(3.14159*0.25) 
            end
            if Backward>0 and Right>0 and Forward<1 and Left<1 then
            Arr[0]:setPose("move_y",1)
            Arr[0]:setPose("move_x",-1)
            ang = ang -(3.14159*1.25)  
            end
            if Backward>0 and Left>0 and Forward<1 and Right<1 then
            Arr[0]:setPose("move_y",-1)
            Arr[0]:setPose("move_x",-1)
             ang = ang +(3.14159*1.25)
            end
            
            
        else
     
            speed = (200*sprint)
      
        end
        
        
        
    end

        
    
    
    if Forward>0 and Left<1 and Backward<1 and Right<1 then 
    if crouch == 0 then
    Arr[0]:setPose("move_y", 0)
    Arr[0]:setPose("move_x", 0)
    end
    if crouch == 0 and vel2 == 0 then 
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_x", 1)
    end
    end
    
    if Left>0 and Forward<1 and Backward<1 and Right<1 then 
    if crouch == 0 and jump == 0 then 
    ang = ang -(3.14159*0.5)
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_y", -1)
    end
    end
    
    if Right>0 and Forward<1 and Backward<1 and Left<1 then 
    if crouch == 0 and vel2 == 0 then 
    ang = ang + (3.14159*0.5)
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_y", 1)
    else
    end
    end
    
    if Backward>0 and Forward<1 and Left<1 and Right<1 then 
    if crouch == 0 then
    Arr[0]:setPose("move_y", 0)
    Arr[0]:setPose("move_x", 0)
    end
    if crouch == 0 and vel2 == 0 then 
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_x", -1)
        ang = ang + 3.14159
    end
    end    
    
    
    
    
    
    
  
    
    if Forward>0 and Left>0 and Backward<1 and Right<1 then 
    if crouch == 0 and vel2 == 0 then 
    ang = ang - (3.14159*0.25)
         Arr[0]:setPose("move_y", -1)
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_x", 1)
    end
    end
    
    if Forward>0 and Right>0 and Backward<1 and Left<1 then 
    if crouch == 0 and vel2 == 0 then 
    ang = ang + (3.14159*0.25)
    Arr[0]:setPose("move_y", 1)
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_x", 1)
    end
    end
    
    if Backward>0 and Left>0 and Forward<1 and Right<1 then 
    if crouch == 0 and vel2 == 0 then 
    ang = ang + (3.14159*1.25)
        Arr[0]:setPose("move_y", -1)
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_x", -1)
    else
    end
    end
    
    if Backward>0 and Right>0 and Left<1 and Forward<1 then 
    if crouch == 0 and vel2 == 0 then 
    ang = ang + (3.14159*.75)
        Arr[0]:setPose("move_y", 1)
        Arr[0]:setAnimation("run_"..all2,nil,1*sprint)
        Arr[0]:setPose("move_x", -1)
  
    end
    end    
    
    
    
    Arr[0]:setPose("aim_pitch",owner():getEyeAngles().pitch)
    Arr[0]:setPose("head_pitch",owner():getEyeAngles().pitch)
    
    
    eyeang = (owner():getEyeAngles().yaw/2)
    norang = (owner():getAngles().yaw/2)
    
    
    //print((eyeang-norang)*2)
    
    
    if eyeang-norang >= -89 and eyeang-norang <= 89  then
    Arr[0]:setPose("head_yaw",(eyeang-norang)*2)
    Arr[0]:setPose("aim_yaw",(eyeang-norang)*2)
    end
    
    
    
    
    
    
    
    
   
    
    
    
    
    if Forward < 1 and Backward < 1 and Left < 1 and Right < 1 and crouch == 0 then
    speed = 0
    
    
        if vel2 < 1 then
    Arr[0]:setAnimation("idle_"..all2,nil,1)

    end
    end
    
    
    
    if vel2 > 0  then
    if Forward > 0 or Backward > 0 or Left > 0 or Right > 0 then
    JumpBoost = (480*(sprint*.875))*1
    end
    end
    
    if vel2 < 1 then
         JumpBoost = 0 
       end
    
    speed = speed + JumpBoost
    Velox = (-((speed) * math.cos(ang)))
    Veloy = (((speed) * math.sin(ang)))
    
    speed = speed - JumpBoost
    
    Arr[0]:setVel(Vector(Velox,Veloy,Veloz))
   
    
    if Forward > 0 or Backward > 0 or Right > 0 or Left > 0 then
    Arr[0]:setAngles(Angle(0,owner():getEyeAngles().yaw,0))
    
    else
     if Forward < 1 and Backward < 1 and Right < 1 and Left < 1 then
    Arr[0]:setAngles(Angle(0,owner():getAngles().yaw,0))
    end
    end
    
    
    HitboxPos = lol:getPos()
    local Filter = {Turret, lol}
    Hit = trace.traceHull(Vector(HitboxPos.x,HitboxPos.y,HitboxPos.z),Vector(HitboxPos.x,HitboxPos.y,HitboxPos.z-50000),lol:obbMins(),lol:obbMaxs(),Filter)  

    
    
   
    chip():isWeldedTo():setFrozen(true)
    chip():isWeldedTo():setUnbreakable(true)
    lol:setFrozen(true)
    
    Arr[0]:setPos(Vector(Arr[0]:getPos().x,Arr[0]:getPos().y,lol:getPos().z-32.5))
    

    if all == "physgun" then
         Arr[2]:setAngles(Angle((Arr[0]:getAngles().pitch-50)-(owner():getEyeAngles().pitch/2),Arr[0]:getAngles().yaw+120,Arr[0]:getAngles().roll+170))
    end
    
    if ScrollUp == 1 then
    ScrollDist = ScrollDist + 50
    MaxPhysDist = MaxPhysDist + ScrollDist
    ScrollDist = 0
    end
    if ScrollDown == 1 then
    ScrollDist = ScrollDist - 50
    MaxPhysDist = MaxPhysDist + ScrollDist
    ScrollDist = 0
    end
    
    Arr[1]:setPos(Vector(Arr[0]:getPos().x+(-(-60 * math.cos(-(owner():getEyeAngles().yaw+180)/57.5))),Arr[0]:getPos().y+((-60 * math.sin(-(owner():getEyeAngles().yaw+180)/57.5))),(Arr[0]:getPos().z)+80))
    

   if primary == 0 then
    tog = 1
    PropDistance = 0
    end

   

    if all == "smg1" and primary == 1 then
        wire.ports.Fire   = 1
    else
        if  primary == 0 then
        wire.ports.Fire   = 0
        end
    end



    if all == "physgun" and primary == 1 then
    PhsygunEnd = (Arr[1]:getPos() + Arr[1]:getForward() * (MaxPhysDist-PropDistance))
     

     
    
    
    local Filter = {Arr[0], Arr[1], lol, chip(), Arr[2], Turret}
    local Filter2 = {Arr[0], Arr[1], lol, chip(), Arr[2], Turret}
    if tog == 1 then
       PropPickup = trace.trace(Arr[1]:getPos(),(Arr[1]:getPos() + Arr[1]:getForward() * (MaxPhysDist-PropDistance)),Filter).Entity  
       PropPickupPos = trace.trace(Arr[1]:getPos(),(Arr[1]:getPos() + Arr[1]:getForward() * (MaxPhysDist-PropDistance)),Filter2).HitPos 
    end
     a = 15
     b = 0.5
     Arr[3]:setPos((Arr[1]:getPos() + Arr[1]:getForward() * (MaxPhysDist-PropDistance)))

    if isValid(PropPickup) == true then
    if PropPickup:getOwner() == owner() and PropPickup ~= game.getWorld() and tog == 1 then
    PropDistance = ((PropPickupPos:getDistance((Arr[1]:getPos() + Arr[1]:getForward() * MaxPhysDist))))
    PropAng = PropPickup:getAngles()
    PropAng.yaw = PropAng.yaw + (owner():getEyeAngles().yaw*2)
    end
    end
    if isValid(PropPickup) == true then
     if PropPickup:getOwner() == owner() and PropPickup ~= game.getWorld() then
     tog = 0
     
   
    
    PropPickup:setAngles(PropAng)
    PropPickup:applyForceCenter(((((Arr[1]:getPos() + Arr[1]:getForward() * (MaxPhysDist-PropDistance))) - (PropPickup:getPos()))*a - (PropPickup:getVelocity())*b)*(PropPickup:getMass())) 
     
     end
    end
     
    end
    
    
    
    
    




    
    
    if use == 1 then
    print(Arr[0]:getPos())
    usePosition = (Arr[1]:getPos() + Arr[1]:getForward() * 180)
    print(usePosition)
    Filter[0] = Arr[0]
    Filter[1] = lol
    Filter[2] = chip()
    trace.trace(Arr[1]:getPos(), usePosition,Filter)

    print(Hit.Entity)
    Hit.Entity:use(1, 1)
    Hit.Entity:use(0, 1)
    use = 0
    end
    
    
    
    
    
    
    
    
    HitboxPos = lol:getPos()
    local Filter = {Turret, lol}
    Hit = trace.traceHull(Vector(HitboxPos.x,HitboxPos.y,HitboxPos.z+50),Vector(HitboxPos.x,HitboxPos.y,HitboxPos.z-50000),lol:obbMins(),lol:obbMaxs(),Filter)

    if Hit.Hit == true and math.abs((Hit.HitPos).z-lol:getPos().z)<40 and Hit.Entity:isPlayer() == false then
        lol:setPos(Vector(lol:getPos().x,lol:getPos().y,(Hit.HitPos).z+20))
        if vel > 0 then
   
        vel = 0 
        end
        
        
    else
    if Hit.Hit == true and Hit.Entity:isPlayer() == false then
        if vel > 54 then
        Arr[0]:setAnimation("jump_slam",nil,.5)
        end
       
        vel = vel + 3
        
      end  
    end
    
    if Hit.Hit == true and math.abs((Hit.HitPos).z-lol:getPos().z)<40 and Hit.Entity:isPlayer() == false then 
    
    
    if jump == 1 then
    vel2 = 24
    Arr[0]:setAnimation("jump_slam",nil,.5)
    jump = 0
    end
    end
    jump = 0
  
    if vel2 > 0 then
    vel2 = vel2 - 3
    end
    
    if vel2 < 0 then
        vel2 = 0
    end
    
    if veltest > 0 then
    veltest = veltest - 1
    end
    TEST = TEST + veltest
    
    lol:setPos(Vector(Arr[0]:getPos().x,Arr[0]:getPos().y,(lol:getPos().z)+vel2))
    
     
    
    lol:setInertia(Vector(-90,-90,100))
    local Filter = {Turret, lol}
    Hit = trace.traceHull(Vector(HitboxPos.x,HitboxPos.y,HitboxPos.z),Vector(HitboxPos.x,HitboxPos.y,HitboxPos.z-vel),lol:obbMins(),lol:obbMaxs(),Filter)
    if Hit.Hit == false then
    lol:setPos(Vector(Arr[0]:getPos().x,Arr[0]:getPos().y,(lol:getPos().z)-(vel)))
    else
    vel = 50
    end
    lol:setAngles(Angle(0,0,90))
    
  

end)

end)